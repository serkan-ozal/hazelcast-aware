{"name":"Hazelcast-Aware","tagline":"Make your application aware of Hazelcast with Java Instrumentation API","body":"1. What is Hazelcast-Aware?\r\n==============\r\n\r\n**Hazelcast-Aware** is a **Java Instrumentation API** based **Hazelcast** extension to use Hazelcast data structures (Distributed maps, lists, sets, queues, objects,  locks, topics, executers, entry listeners, etc ...) without interacting with **`HazelcastInstance`** class. You can specify which classes or fields will be Hazelcast aware by annotation or XML based configurations. **Hazelcast-Aware** scans classpath (classpath directories, dependent jar files and web application directories) of your application and finds Hazelcast aware classes and fields, then instruments them. Demo application is avaiable at [https://github.com/serkan-ozal/hazelcast-aware-demo](https://github.com/serkan-ozal/hazelcast-aware-demo).\r\n\r\n2. Usage\r\n=======\r\n\r\nTo find and make thses classes or fields Hazelcast aware, there are two ways:\r\n\r\n1) You just need to call explicitly making aware method at startup in anywhere of your application.\r\n\r\n~~~~~ java\r\n...\r\n\r\ncom.hazelcast.aware.HazelcastAwarer.makeHazelcastAware();\r\n\r\n...\r\n~~~~~\r\n\r\nor\r\n\r\n2) You can extend your main class from **`com.hazelcast.aware.HazelcastAware`** class.\r\n\r\n~~~~~ java\r\n...\r\n\r\npublic class HazelcastAwareDemo extends HazelcastAware {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\r\n\t\t...\r\n\t\r\n\t}\r\n\t\r\n}\t\r\n\r\n...\r\n~~~~~\r\n\r\n\r\n3. Installation\r\n=======\r\n\r\nIn your `pom.xml`, you must add repository and dependency for **Hazelcast-Aware**. \r\nYou can change `hazelcast.aware.version` to any existing **Hazelcast-Aware** library version.\r\nLatest version is `1.0.0`.\r\n\r\n~~~~~ xml\r\n...\r\n<properties>\r\n    ...\r\n    <hazelcast.aware.version>1.0.0</hazelcast.aware.version>\r\n    ...\r\n</properties>\r\n...\r\n<dependencies>\r\n    ...\r\n\t<dependency>\r\n\t\t<groupId>com.hazelcast</groupId>\r\n\t\t<artifactId>hazelcast.aware</artifactId>\r\n\t\t<version>${hazelcast.aware.version}</version>\r\n\t</dependency>\r\n\t...\r\n</dependencies>\r\n...\r\n<repositories>\r\n\t...\r\n\t<repository>\r\n\t\t<id>serkanozal-maven-repository</id>\r\n\t\t<url>https://github.com/serkan-ozal/maven-repository/raw/master/</url>\r\n\t</repository>\r\n\t...\r\n</repositories>\r\n...\r\n~~~~~\r\n\r\n4. Features\r\n=======\r\n\r\n4.1. Default Configurations\r\n-------\r\n\r\nYou can access object which holds default configurations by **`DefaultConfigs getDefaultConfigs()`** method of **`com.hazelcast.aware.config.manager.ConfigManager`** class. If you don't have configuration manager instance, you can access it by **`com.hazelcast.aware.config.manager.ConfigManagerFactory.getConfigManager()`**.\r\n\r\nHere are default configurations:\r\n\r\n* **Default Instance name:** If there is no specified instance name for Hazelcast aware class or field, this instance name is used to get default Hazelcast instance. If there is no specified instance name for Hazelcast aware class or field and default instance name is empty in default configurations, the first instance is returned from **`com.hazelcast.instance.HazelcastInstanceFactory.getAllHazelcastInstances()`**.\r\n\r\n4.2. Hazelcast-Aware Class\r\n-------\r\n\r\nYou can make any class Hazelcast aware by annotating it with **`com.hazelcast.aware.config.provider.annotation.HazelcastAwareClass`** annotation.\r\n\r\n~~~~~ java\r\n@HazelcastAwareClass\r\npublic class HazelcastAwareBean {\r\n\r\n\t...\r\n}\r\n~~~~~\r\n\r\n* **Instance name:**  You can associate Hazelcast aware class with specific Hazelcast instance by using **`instanceName`** attribute of **`com.hazelcast.aware.config.provider.annotation.HazelcastAwareClass`** annotation. If you don't specified instance name, default Hazelcast instance is used.\r\n\r\n~~~~~ java\r\n@HazelcastAwareClass(instanceName = \"myHazelcastInstance\")\r\npublic class HazelcastAwareBean {\r\n\r\n\t...\r\n}\r\n~~~~~\r\n\r\n4.3. Hazelcast-Aware Field\r\n-------\r\n\r\nYou can make general configurations of any field defined in any Hazelcast aware class by annotating it with **`com.hazelcast.aware.config.provider.annotation.HazelcastAwareField`** annotation.\r\n\r\n* **Instance name:** You can associate Hazelcast aware field with specific Hazelcast instance by using **`instanceName`** attribute of **`com.hazelcast.aware.config.provider.annotation.HazelcastAwareField`** annotation. If you don't specify instance name, Hazelcast instance of owner class is used. If instance name is not defined for class also, default Hazelcast instance is used.\r\n\r\n~~~~~ java\r\n@HazelcastAwareClass\r\npublic class HazelcastAwareBean {\r\n\r\n\t@HazelcastAwareField(instanceName = \"myHazelcastInstance\")\r\n\tprivate Map<Long, String> myMap;\r\n\t\r\n\t...\r\n}\t\r\n~~~~~\r\n\r\n\r\n4.4. Hazelcast-Aware Map Typed Field\r\n-------\r\n\r\nYou can make any **`java.util.Map`** typed (or sub-typed) field, defined in any Hazelcast aware class, Hazelcast aware by annotating it with **`com.hazelcast.aware.config.provider.annotation.HazelcastAwareMapField`** annotation.\r\n\r\n~~~~~ java\r\n@HazelcastAwareClass\r\npublic class HazelcastAwareBean {\r\n\r\n\t@HazelcastAwareMapField\r\n\tprivate Map<Long, String> myMap;\r\n\t\r\n\t...\r\n}\t\r\n~~~~~\r\n\r\n* **Map name:**  You can associate this map field to any distributed map on Hazelcast cluster by using **`name`** attribute of **`com.hazelcast.aware.config.provider.annotation.HazelcastAwareMapField`** annotation. If you don't specify map name, default map name is generated by using **`<class_name>_<field_name>`** format.\r\n\r\n~~~~~ java\r\n@HazelcastAwareClass\r\npublic class HazelcastAwareBean {\r\n\r\n\t@HazelcastAwareMapField(name = \"myMap\")\r\n\tprivate Map<Long, String> myMap;\r\n\t\r\n\t...\r\n}\t\r\n~~~~~\r\n\r\n4.5. Hazelcast-Aware List Typed Field\r\n-------\r\n\r\nYou can make any **`java.util.List`** typed (or sub-typed) field, defined in any Hazelcast aware class, Hazelcast aware by annotating it with **`com.hazelcast.aware.config.provider.annotation.HazelcastAwareListField`** annotation.\r\n\r\n~~~~~ java\r\n@HazelcastAwareClass\r\npublic class HazelcastAwareBean {\r\n\r\n\t@HazelcastAwareListField\r\n\tprivate List<Long> myList;\r\n\t\r\n\t...\r\n}\t\r\n~~~~~\r\n\r\n* **List name:**  You can associate this list field to any distributed list on Hazelcast cluster by using **`name`** attribute of **`com.hazelcast.aware.config.provider.annotation.HazelcastAwareListField`** annotation. If you don't specify list name, default list name is generated by using **`<class_name>_<field_name>`** format.\r\n\r\n~~~~~ java\r\n@HazelcastAwareClass\r\npublic class HazelcastAwareBean {\r\n\r\n\t@HazelcastAwareListField(name = \"myList\")\r\n\tprivate List<Long> myList;\r\n\t\r\n\t...\r\n}\t\r\n~~~~~\r\n\r\n4.6. Hazelcast-Aware Set Typed Field\r\n-------\r\n\r\nYou can make any **`java.util.Set`** typed (or sub-typed) field, defined in any Hazelcast aware class, Hazelcast aware by annotating it with **`com.hazelcast.aware.config.provider.annotation.HazelcastAwareSetField`** annotation.\r\n\r\n~~~~~ java\r\n@HazelcastAwareClass\r\npublic class HazelcastAwareBean {\r\n\r\n\t@HazelcastAwareSetField\r\n\tprivate Set<Long> mySet;\r\n\t\r\n\t...\r\n}\t\r\n~~~~~\r\n\r\n* **Set name:**  You can associate this set field to any distributed set on Hazelcast cluster by using **`name`** attribute of **`com.hazelcast.aware.config.provider.annotation.HazelcastAwareSetField`** annotation. If you don't specify set name, default set name is generated by using **`<class_name>_<field_name>`** format.\r\n\r\n~~~~~ java\r\n@HazelcastAwareClass\r\npublic class HazelcastAwareBean {\r\n\r\n\t@HazelcastAwareSetField(name = \"mySet\")\r\n\tprivate Set<Long> mySet;\r\n\t\r\n\t...\r\n}\t\r\n~~~~~\r\n\r\n4.7. Hazelcast-Aware Queue Typed Field\r\n-------\r\n\r\nYou can make any **`java.util.Queue`** typed (or sub-typed) field, defined in any Hazelcast aware class, Hazelcast aware by annotating it with **`com.hazelcast.aware.config.provider.annotation.HazelcastAwareQueueField`** annotation.\r\n\r\n~~~~~ java\r\n@HazelcastAwareClass\r\npublic class HazelcastAwareBean {\r\n\r\n\t@HazelcastAwareQueueField\r\n\tprivate Queue<Long> myQueue;\r\n\t\r\n\t...\r\n}\t\r\n~~~~~\r\n\r\n* **Queue name:**  You can associate this queue field to any distributed queue on Hazelcast cluster by using **`name`** attribute of **`com.hazelcast.aware.config.provider.annotation.HazelcastAwareQueueField`** annotation. If you don't specify queue name, default queue name is generated by using **`<class_name>_<field_name>`** format.\r\n\r\n~~~~~ java\r\n@HazelcastAwareClass\r\npublic class HazelcastAwareBean {\r\n\r\n\t@HazelcastAwareQueueField(name = \"myQueue\")\r\n\tprivate Queue<Long> myQueue;\r\n\t\r\n\t...\r\n}\t\r\n~~~~~\r\n\r\n4.8. Hazelcast-Aware Topic Typed Field\r\n-------\r\n\r\nYou can make any **`com.hazelcast.core.ITopic`** typed (or sub-typed) field, defined in any Hazelcast aware class, Hazelcast aware by annotating it with **`com.hazelcast.aware.config.provider.annotation.HazelcastAwareTopicField`** annotation.\r\n\r\n~~~~~ java\r\n@HazelcastAwareClass\r\npublic class HazelcastAwareBean {\r\n\r\n\t@HazelcastAwareTopicField\r\n\tprivate ITopic<Long> myTopic;\r\n\t\r\n\t...\r\n}\t\r\n~~~~~\r\n\r\n* **Topic name:**  You can associate this topic field to any distributed topic on Hazelcast cluster by using **`name`** attribute of **`com.hazelcast.aware.config.provider.annotation.HazelcastAwareTopicField`** annotation. If you don't specify topic name, default topic name is generated by using **`<class_name>_<field_name>`** format.\r\n\r\n~~~~~ java\r\n@HazelcastAwareClass\r\npublic class HazelcastAwareBean {\r\n\r\n\t@HazelcastAwareTopicField(name = \"myTopic\")\r\n\tprivate ITopic<Long> myTopic;\r\n\t\r\n\t...\r\n}\t\r\n~~~~~\r\n\r\n4.9. Hazelcast-Aware Initializer\r\n-------\r\n\r\nYou can specify your custom initializer classes by implementing **`com.hazelcast.aware.initializer.HazelcastAwareInitializer`** interface to do some stuff before all operations such as setting default configurations in **`com.hazelcast.aware.config.DefaultConfigs`** class. Your custom initializer classes are found while scanning claspath and registered automatically. \r\n\r\nYou can specify execution order of your initializer by implementing **`int getOrder()`** method. There are three pre-defined execution orders such as **`HIGHEST_ORDER`**, **`ORDER_DOESNT_MATTER`** and **`LOWEST_ORDER`**. \r\n\r\n~~~~~ java\r\n@HazelcastAwareClass\r\npublic class MyHazelcastAwareInitializer implements HazelcastAwareInitializer {\r\n\r\n\t@Override\r\n\tpublic int getOrder() {\r\n\t\treturn ORDER_DOESNT_MATTER;\r\n\t}\r\n\t\r\n\t\r\n\t@Override\r\n\tpublic void init(ConfigManager configManager) {\r\n\t\tconfigManager.getDefaultConfigs().setDefaultInstanceName(\"myInstance\");\r\n\t}\r\n\t\r\n}\t\r\n~~~~~\r\n\r\n4.10. Hazelcast-Aware Injector\r\n-------\r\n\r\nYou can specify your custom injector classes by implementing **`com.hazelcast.aware.injector.HazelcastAwareInjector`** interface to do some stuff (injecting or whatever you want) on instances of Hazelcast aware classes. Your custom injector classes are found while scanning claspath and registered automatically. \r\n\r\nInstance of injector class is called for every object creation of related class. \r\n\r\nYou must specify type of your related class to inject by implementing **`Class<T> getType()`** method. If you are interested in all types, you can return **`Object.class`** or pre-defined expression of it as **`TYPE_DOESNT_MATTER`** as type in  **`getType()`** method.\r\n\r\nYou can specify execution order of your injector by implementing **`int getOrder()`** method. There are three pre-defined execution orders such as **`HIGHEST_ORDER`**, **`ORDER_DOESNT_MATTER`** and **`LOWEST_ORDER`**. \r\n\r\n~~~~~ java\r\n@HazelcastAwareClass\r\npublic class MyHazelcastAwareInjector implements HazelcastAwareInjector<MyEntity> {\r\n\r\n\t@Override\r\n\tpublic int getOrder() {\r\n\t\treturn ORDER_DOESNT_MATTER;\r\n\t}\r\n\t\r\n\t@Override\r\n\tClass<MyEntity> getType() {\r\n\t\treturn MyEntity.class;\r\n\t}\r\n\t\r\n\t@Override\r\n\tpublic void inject(MyEntity myEntity) {\r\n\t\t// Do some stuff on MyEntity object\r\n\t}\r\n\t\r\n}\t\r\n~~~~~\r\n\r\n4.11. Hazelcast-Aware Processor\r\n-------\r\n\r\nYou can specify your custom processor classes by implementing **`com.hazelcast.aware.processor.HazelcastAwareProcessor`** interface to do some stuff after instrumentation operations are done. Your custom processor classes are found while scanning claspath and registered automatically. \r\n\r\nYou can specify execution order of your processor by implementing **`int getOrder()`** method. There are three pre-defined execution orders such as **`HIGHEST_ORDER`**, **`ORDER_DOESNT_MATTER`** and **`LOWEST_ORDER`**. \r\n\r\n~~~~~ java\r\n@HazelcastAwareClass\r\npublic class MyHazelcastAwareProcessor implements HazelcastAwareprocessor {\r\n\r\n\t@Override\r\n\tpublic int getOrder() {\r\n\t\treturn ORDER_DOESNT_MATTER;\r\n\t}\r\n\t\r\n\t\r\n\t@Override\r\n\tpublic void process(ConfigManager configManager) {\r\n\t\t// Do some stuff after instrumenting\r\n\t}\r\n\t\r\n}\t\r\n~~~~~\r\n\r\n4.12. Hazelcast-Aware Config Provider\r\n-------\r\n\r\nYou can specify your custom configuration provider classes by implementing **`com.hazelcast.aware.config.provider.HazelcastAwareConfigProvider`** interface to provide Hazelcast cluster configurations (**`com.hazelcast.config.Config`**) to build Hazelcast cluster programmatically. Your custom configuration provider classes are found while scanning claspath and registered automatically.  \r\n\r\n~~~~~ java\r\n@HazelcastAwareClass\r\npublic class HazelcastInstanceConfigProvider implements HazelcastAwareConfigProvider {\r\n\r\n\tprivate List<Config> configs = new ArrayList<Config>();\r\n\t\r\n\tpublic HazelcastInstanceConfigProvider() {\r\n\t\tinit();\r\n\t}\r\n\t\r\n\t/**\r\n\t<hz:config>\r\n       <!-- Hazelcast Instance Name -->\r\n       <hz:instance-name>hazelcast-aware-demo-instance</hz:instance-name>\r\n       <!-- Hazelcast Group Name and Password -->\r\n       <hz:group name=\"hazelcast-aware-demo\" password=\"$$$_hazelcast-aware-demo_$$$\" />\r\n       <!-- Hazelcast Network Configuration -->\r\n       <hz:network port=\"5701\" port-auto-increment=\"true\">\r\n           <hz:join>\r\n               <hz:multicast enabled=\"true\"/>\r\n               <hz:tcp-ip enabled=\"false\"/>\r\n           </hz:join>\r\n       </hz:network>\r\n   \t</hz:config>\r\n\t*/\r\n\tprivate void init() {\r\n\t\tConfig config = new Config();\r\n\t\tconfig.setInstanceName(\"hazelcast-aware-demo-instance\");\r\n\t\tconfig.setGroupConfig(\r\n\t\t\t\tnew GroupConfig(\r\n\t\t\t\t\t\t\"hazelcast-aware-demo\", \r\n\t\t\t\t\t\t\"$$$_hazelcast-aware-demo_$$$\"));\r\n\t\tconfig.setNetworkConfig(\r\n\t\t\t\tnew NetworkConfig().\r\n\t\t\t\t\t\tsetPort(5701).\r\n\t\t\t\t\t\tsetPortAutoIncrement(true).\r\n\t\t\t\t\t\tsetJoin(\r\n\t\t\t\t\t\t\t\tnew JoinConfig().\r\n\t\t\t\t\t\t\t\t\t\tsetMulticastConfig(\r\n\t\t\t\t\t\t\t\t\t\t\t\tnew MulticastConfig().\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetEnabled(true))));\r\n\t\tconfigs.add(config);\r\n\t}\r\n\t\r\n\t@Override\r\n\tpublic List<Config> provideConfigs() {\r\n\t\treturn configs;\r\n\t}\r\n\r\n}\t\r\n~~~~~\r\n\r\n5. Lifecycle\r\n=======\r\n\r\nLifecycle of operations done by Hazelcast-Aware are as follows:\r\n\r\n**1.** Find all Hazelcast aware classes (annotated by **`com.hazelcast.aware.config.provider.annotation.HazelcastAwareClass`** annotation and specificed at XML or properties configuration files).\r\n\r\n**2.** Find all Hazelcast aware initializer classes between Hazelcast aware classes and execute them. \r\n\r\n**3.** Do instrumentation over found Hazelcast aware classes.\r\n\r\n**4.** Find all Hazelcast aware configuration provider classes between Hazelcast aware classes, get Hazelcast cluster configurations from them and create Hazelcast clusters with these configurations. \r\n\r\n**5.** Find all Hazelcast aware processor classes between Hazelcast aware classes and execute them. \r\n\r\n6. Roadmap\r\n=======\r\n\r\n* Distributed lock (**`ILock`**) will be supported.\r\n\r\n* Distributed object will be supported.\r\n\r\n* Distributed semaphore (**`Semaphore`**) will be supported.\r\n\r\n* Entry/Item listeners (for maps, lists, sets, ...) will be supported.\r\n\r\n* Message listener for (**`ITopic`**) will be supported.\r\n\r\n* Executor service will be supported.\r\n\r\n* XML based configuration will be supported.\r\n\r\n* Properties file based configuration will be supported.\r\n\r\n* Caching will be supported.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}